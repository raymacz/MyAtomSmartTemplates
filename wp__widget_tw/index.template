<?php
error_reporting(E_ALL); //during developement, add this to help in making WP plugins
/**
* Plugin Name: <%= Title %> Twitter Widget
* Description: This plugin fetches data using CURL / AJAX & converts to JSON format. That data is displayed into a widget.
* Version: 0.1.0
* Author: Raymacz
* Author URI: http:mqassist.com
* Text Domain: cwpl
* License: GPL2+
*
*/
// title: any Twitter Username (products.json) // from  **06 - Registering the Twitter Widget** until **309 - Regular Expressions**

Class JW_Twitter_Widget extends WP_Widget{
	function __construct() { //constructors method run immediately when its instantiated

		$widget_options = array(
			'description' => 'Displays messages to readers',
			'name' => 'Twitter Widget'
		);
		parent::__construct('JW_Twitter_Widget','', $widget_options); // https://developer.wordpress.org/reference/classes/wp_widget/__construct/
	}

	public function form($instance) { // https://developer.wordpress.org/reference/classes/wp_widget/form/
		//print_r($instance);
		extract($instance); //extract from array to variable
		?>
		<p>
			<label for="<?php echo $this->get_field_id('title'); ?>"> Title: </label>		 <!--unique ID & no conflict -->
			<input type="text" class="widefat" id="<?php echo $this->get_field_id('title'); ?>"
				   name="<?php echo $this->get_field_name('title'); ?>"
				   value="<?php if (isset($title)) echo esc_attr($title); ?>" />  <!-- $title comes from extract() of $instance -->
		</p>
		<p>
			<label for="<?php echo $this->get_field_id('username'); ?>"> Twitter Username: </label>		 <!--specifiy a username for twitter -->
			<input type="text" class="widefat" id="<?php echo $this->get_field_id('username'); ?>"
				   name="<?php echo $this->get_field_name('username'); ?>"
				   value="<?php if (isset($username)) echo esc_attr($username); ?>" />
		</p>
		<p>
			<label for="<?php echo $this->get_field_id('tweet_count'); ?>"> # of Tweets to Retrieve: </label>		 <!--unique ID & no conflict -->
			<input type="number" class="widefat" style="width: 50px" id="<?php echo $this->get_field_id('tweet_count'); ?>"
				   name="<?php echo $this->get_field_name('tweet_count'); ?>"
				   min="1" max="10"
				   value="<?php echo !empty($tweet_count) ? $tweet_count : 5; ?>" />  <!-- 5 is default if empty --> <!-- type="number" - html5 digit only -->
		</p>
		<?php
	}

	public function widget($args, $instance) {//  https://developer.wordpress.org/reference/classes/wp_widget/widget/
		//print_r($args);die(); // prints the display value in a page or post
		//print_r($instance); // displays the value inputted in the form
		extract($args); // extract from array to variable
		extract($instance);
                $title = apply_filters('widget_title',$title);
		if (empty($title)) $title = 'Recent Tweets';
		$data = $this->twitter($tweet_count, $username); // $data - cached data or new data
		//print_r($data);die();
		if (false !== $data && isset($data->tweets)) {
		  echo $before_widget;	// $args
			echo $before_title;
				echo $title;
			echo $after_title;
//			echo '<ul><li>'.implode('</li><li>', $data->tweets).'</li><ul>'; //implode -array into a string	 // turns foreach into a 1line
			echo '<ul class="'.apply_filters('widget_title', 'test-class').'"><li>'.implode('</li><li>', $data->tweets).'</li><ul>'; //implode -array into a string	 // turns foreach into a 1line
		  echo $after_widget;	// $args
		}
	}

	private function twitter($tweet_count, $username){
		if (empty($username)) return false;
		$tweets = get_transient('recent_tweets_widget'); //  WP Transients API - retrieve cached data from database
		if (!$tweets || $tweets->username !== $username || $tweets->tweet_count !== $tweet_count) {  // if there are any changes in the form then proceed with a new fetch
		  //echo $tweet_count;die(); // if none is cached in WP, fetch manualy from the API
		  return $this->fetch_tweets($tweet_count, $username);
		}
		return $tweets; // return data whether cached or new fetch
	}

	private function fetch_tweets($tweet_count, $username){
		$tweets = wp_remote_get("http://127.0.0.1:1337/$username"); //WP function that gets json
//               var_dump($tweets);    die();exit();
		if (isset($tweets->errors)) return false; //moved here coz of wp error // json-decode will return error
		$tweets = json_decode($tweets['body']);
		$tweets =$tweets->Object->results;
//		print_r($tweets);die();
		$data = new stdClass(); // create a new class $data
		$data->username = $username;
		$data->tweet_count = $tweet_count;
		$data->tweets = array();
		foreach ($tweets as $tweet) {
			if ($tweet_count-- === 0) break; //break out of the loop if the tweets has reach the max limit to display.
				///$data[] = $tweet->Object->results[0]->text;
			$data->tweets[] = $this->filter_tweet($tweet->text);	//place all data into a new array ($data)
		}
		// cache in the database using WP transient
		set_transient('recent_tweets_widget', $data, 60 * 1); // saved 1min in database & will be deleted/expire following another request
		//  WP Transients API - allows to set expiration dates. Cache by storing in the database
		//recent_tweets_widget - ID associated int the database, $data - (username & tweet_count)
		//print_r($data);die();
		return $data;
	}

	private function filter_tweet($tweet) {
//		$tweet = preg_replace('/(http[^\s]+)/im', '<a href="$1">$1</a>', $tweet); // replace urls with <a href>  (found in the string)
		$tweet = preg_replace('/((http|ftp|https):\/{2}[^\s]+)/im', '<a href="$1">$1</a>', $tweet); // replace urls with <a href>  (found in the string)
		$tweet = preg_replace('/(@[^\s]+)/i', '<i> $1</i>', $tweet); // @ for username
                // http://www.phpliveregex.com/ // https://www.functions-online.com/preg_replace.html
		return $tweet;
	}
}

add_action('widgets_init', 'register_jw_twitter_widget');
function register_jw_twitter_widget() {
	register_widget('JW_Twitter_Widget'); // Messager Object Instance is passed.
}

// justa a test: this class has changed the widget title & the class of <li> as a test for apply_filters
add_filter('widget_title', function() {
    return 'change-class';
});
 ?>
