<?php

/**
* Plugin Name: <%= Title %> Twitter Shortcode
* Description: It fetches data from Twitter using CURL & displays into the body of a post based on shortcodes.
* Version: 0.1.0
* Author: Raymacz
* Author URI: http:mqassist.com
* Text Domain: rbtm
* License: GPL2+
*
*/

error_reporting(E_ALL); //during developement, add this to help in making WP plugins

/// [twitter  username="myusername" show_tweets='true']  ///06 - Tweets Project - Part 3

add_shortcode('twitter', function($atts, $content){
	echo "shortcode enabled!";
//        print_r($atts);die();
	$atts = shortcode_atts(
		array(
			'username' => 'raymacz',
			'content' => !empty($content) ? $content : 'Follow me now!!!',
			'show_tweets' => false,
			'tweet_reset_time' => 2, // # of min
			'num_tweets' => 8, // max of tweets to display
		), $atts
	);
	extract($atts);	//extract - gets values from an array and convert it to variables.
	if ($show_tweets) {
		$tweets= fetch_tweets($num_tweets, $username, $tweet_reset_time);
	}
	return "$tweets <p><a href='http://mqassist.ml/$username'>$content</a></p>";
		// acceptable variables after extract
		// will display <ul> list & <p>
});

function curl($url){
	$c = curl_init($url);
	curl_setopt($c, CURLOPT_RETURNTRANSFER, 1); // echo or transfer into a variable, 1 is true
	curl_setopt($c, CURLOPT_CONNECTTIMEOUT, 3); // give it a timeout of 3sec.
	curl_setopt($c, CURLOPT_TIMEOUT, 5); //standard timeout
	return json_decode(curl_exec($c));
}

function fetch_tweets($num_tweets, $username, $tweet_reset_time) {
		global $id;
		//delete_post_meta($id, 'jw_recent_tweets');die();
		$recent_tweets = get_post_meta($id, 'jw_recent_tweets');
		//echo 'TWEETS: ';print_r($recent_tweets);
//                $time_now=date('Y-m-d H:i:s',time());
//                $time_before=date('Y-m-d H:i:s',time()-(1*60));
//                $time_diff= date('H:i:s', strtotime($time_now)-strtotime($time_before));
		$has_reset=reset_data($recent_tweets, $tweet_reset_time); // reset old tweets if there is any
//		if (empty($recent_tweets)) { // if no cache, fetch new tweets and cache
		if ($has_reset or empty($recent_tweets) ) { // if no cache, fetch new tweets and cache
			$tweets = curl("http://127.0.0.1:1337/products.json");
			//echo 'TWEETS: ';print_r($tweets->Object->results[0]->text);
			// tweets.Object.results[0].text (in javascript)
			$data = array();
			$tweets =$tweets->Object->results; // get only the results array
			//echo 'myTWEETSx: ';print_r($tweets);die();
                        if (isset($tweets)) :
                            foreach ($tweets as $tweet) {
                                    if ($num_tweets-- === 0) break; //break out of the loop if the tweets has reach the max limit to display.
                                    //$data[] = $tweet->Object->results[0]->text;
                                    $data[] = $tweet->text;
                            }
                        else :
                            $data[] = "No Tweets fetched! Reloading in $tweet_reset_time minutes...";
                        endif;
			//echo 'myTWEETSx: ';print_r($data);die();
//			$new_tweets = array( (int)date('i', time())); // if time() is 2nd paramater, its current time. 'i'- 2-digit minute // (int) cast into integer
			$new_tweets = array( date('Y-m-d H:i:s',time()));
			$new_tweets[] = '<ul class="jw_recent_tweets"><li>'.implode('</li><li>', $data). '</li></ul>';
				/// implode - turns an array into individual string w/ separator & create a fragment
			cache_meta($new_tweets); // add time & tweet to post meta
		}
		return isset($new_tweets[1]) ? $new_tweets[1] : $recent_tweets[0][1]; // return the tweets <ul>
};

function cache_meta($n_tweets) {
	// $n_tweets[0] = current minute
	// $n_tweets[1] = tweet html fragment
	global $id;
	add_post_meta($id, 'jw_recent_tweets', $n_tweets, true); // Add meta data field to a post.
		// $id - post id#, jw_recent_tweets - any name identifier we can put, true - should be unique
};

function reset_data($recent_tweets, $tweet_reset_time) {
	global $id;
	if (isset($recent_tweets[0][0])) {
//		if ($delay >= 60) $delay -= 60; // if time > oclock, then subtract 60 - minutes only, hour excluded
                $t_now = date('Y-m-d H:i:s',time());
                $t_before = $recent_tweets[0][0];
                $time_diff = strtotime($t_now) - strtotime($t_before);
		if ((int)$time_diff > ((int)$tweet_reset_time*60))	{ // if post last updated was later than reset time  (1min)
				delete_post_meta($id, 'jw_recent_tweets'); //stop increment of post_meta & delete the old meta.
                                return true;
		}
	}
        return false;
};

 ?>
